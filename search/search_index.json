{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Super Library","text":""},{"location":"#why-we-built-the-super-library","title":"Why We Built the Super Library","text":"<p>We wanted to build a scalable app, so we created the Super library for our own use.</p>"},{"location":"#is-flutterflow-or-firestore-not-scalable","title":"Is FlutterFlow or Firestore Not Scalable?","text":"<p>FlutterFlow supports custom source coding, allowing you to write custom code. However, Firestore is not ideal for a midsize chat app.</p>"},{"location":"#issues-with-firestore","title":"Issues with Firestore","text":"<ul> <li>Document Reads: Reading one document often requires reading additional related documents, like user information.</li> <li>Data Usage: Firestore requires downloading entire documents, increasing data usage and battery drain for end-users.</li> </ul>"},{"location":"#advantages-of-realtime-database","title":"Advantages of Realtime Database","text":"<ul> <li>Efficiency: Faster, simpler, and cheaper than Firestore.</li> <li>Selective Data: Allows downloading only specific fields.</li> <li>Ideal Use: Suitable for large chat apps or social community apps with high read/write operations.</li> </ul>"},{"location":"#current-limitations","title":"Current Limitations","text":"<ul> <li>Widget Builder: Supported only for Components, not Custom Widgets. This makes integration more complex.</li> <li>Marketplace: Super library may not be published in the Marketplace as it uses Firebase, which is against FlutterFlow's principles.</li> </ul>"},{"location":"#want-to-use-the-super-library","title":"Want to Use the Super Library?","text":"<p>Until the Super Library is published to the marketplace, you can:</p> <ul> <li>Copy the Super Library: Get a copy and create your own version.</li> <li>Add as a Dependency: Directly add the Super Library as a dependency to your project.</li> </ul> <p>If you need help, email me at: thruthesky@gmail.com</p>"},{"location":"#cost-of-firestore","title":"Cost of Firestore","text":"<p>We chose the Realtime Database over Firestore mainly due to cost. While Firestore is popular and preferred by many developers, it is more expensive than the Realtime Database.</p>"},{"location":"#example-scenario","title":"Example Scenario","text":"<p>Imagine you have a chat app with 10,000 active users per day. Each user opens 10 chat rooms, and each chat room downloads 100 messages on average. Users may scroll up to load more messages.</p> <ul> <li>Reads Calculation: </li> <li>10,000 users * 10 chat rooms * 100 messages = 10,000,000 reads</li> <li>Cost: 10,000,000 reads = USD 3.1</li> </ul>"},{"location":"#additional-reads","title":"Additional Reads","text":"<p>There are extra document reads, such as reading user documents or documents in security rules to support chat functionality. Let's multiply the cost by 3.</p> <ul> <li>Adjusted Cost: </li> <li>USD 3.1 * 3 = USD 9.3 per day</li> </ul>"},{"location":"#more-cases","title":"More Cases","text":"<p>Your app will likely read more documents, such as:</p> <ul> <li>Listing chat rooms in a \"my-chat-room-list\" screen</li> <li>Displaying the number of unread messages per chat room</li> <li>Showing the total number of unread messages across all chat rooms</li> </ul> <p>Let's multiply the cost by 2.</p> <ul> <li>Final Cost: </li> <li>USD 9.3 * 2 = USD 18.6 per day</li> </ul>"},{"location":"#conclusion","title":"Conclusion","text":"<p>Your app will read even more documents in various scenarios, and you also have to pay for writing documents.</p> <p>With the Realtime Database, reading documents is free. Yes, there is no cost at all. Writing is also free.</p>"},{"location":"#simplicity","title":"Simplicity","text":"<p>The Super Library includes the most common building blocks your app needs. Check out the features it provides. We've made it as simple as possible and will keep updating it to make it even simpler.</p>"},{"location":"blocking/","title":"Blocking","text":"<p>Super library provides some custom actions to block other users. You can design your own UI for blocking and listing. But you must follow the data structure of the Super library to make everything work together.</p> <p>The blocked information is saved at <code>/users/&lt;uid&gt;/{ blockedUsers: [ ] }</code> in Firestore. And the blocked user list is mirrored to rtdb to work with with the chat and other functionality.</p> <p>Firestore) <pre><code>/users\n   /{uid}\n      { blockedUsers: [ other user uid a, b, c, d ] }\n</code></pre></p> <p>Database) <pre><code>/blockedUsers\n  /{uid}\n   [ a , b, c ]\n</code></pre></p> <p>You can simply add the other user\u2019s UID as a string in the user\u2019s blockedUsers array field. You can do it with a backend query Or you can use blockUser custom action.</p> <p>There is no default UI for listing blocked users.</p> <p>To remove a user from blocking, just remove the user\u2019s UID from blockedUsers array field.</p>"},{"location":"chat/","title":"Chat","text":"<ul> <li>Chat</li> <li>Chat Logic<ul> <li>User Invitation and Consent</li> <li>Chat Room Structure</li> <li>Example of <code>users</code> Field</li> <li>How It Works</li> </ul> </li> <li>Chat Room<ul> <li>How to Create a Chat Room</li> <li>How to Update a Chat Room</li> <li>Example</li> </ul> </li> <li>How to list my Chat Room List<ul> <li>Customizing Chat Room List with Custom Code</li> <li>Customizing Chat Room List with Component</li> </ul> </li> <li>How to list Open Chat Rooms<ul> <li>Customizing Open Chat Room List with Custom Code</li> <li>Customizing Open Chat Room List with Component</li> </ul> </li> <li>Opening a chat room screen</li> <li>Inviting a user into a chat room</li> </ul>"},{"location":"chat/#chat-logic","title":"Chat Logic","text":""},{"location":"chat/#user-invitation-and-consent","title":"User Invitation and Consent","text":"<p>We prevent bad users from sending messages to good users.</p>"},{"location":"chat/#chat-room-structure","title":"Chat Room Structure","text":"<p>Each chat room has a <code>users</code> field, which is a map with user IDs (<code>uid</code>) as keys and a boolean as values.</p>"},{"location":"chat/#example-of-users-field","title":"Example of <code>users</code> Field","text":"<pre><code>{\n  \"users\": {\n    \"A\": true,\n    \"B\": false\n  }\n}\n</code></pre>"},{"location":"chat/#how-it-works","title":"How It Works","text":"<ol> <li>Creating a Chat Room:<ol> <li>When User A starts a chat with User B, a chat room is created with the <code>users</code> field.</li> <li><code>A: true</code> means User A has initiated the chat.</li> <li><code>B: false</code> means User B has not yet accepted the chat.</li> </ol> </li> <li>Visibility of Chat Room:<ol> <li>The chat room appears in User A's chat room list.</li> <li>The chat room does not appear in User B's chat room list until User A sends a message.</li> </ol> </li> <li>Sending a Message:<ol> <li>When User A sends a message, the chat room becomes visible in User B's chat room list.</li> </ol> </li> <li>User B's Consent:<ol> <li>Since <code>B</code> is <code>false</code>, User B sees a confirmation dialog when they tap on the chat room.</li> <li>If User B accepts, <code>B</code> is set to <code>true</code>, and the confirmation dialog will no longer appear.</li> </ol> </li> </ol> <p>This process ensures that users have control over who can send them messages and join their chat rooms.</p>"},{"location":"chat/#chat-room","title":"Chat Room","text":""},{"location":"chat/#how-to-create-a-chat-room","title":"How to Create a Chat Room","text":"<ol> <li>Open Create Chat Room Dialog:</li> <li>Call the <code>createChatRoom</code> custom action<ol> <li>Alternatively, use <code>editChatRoom</code> which supports both creation and update.</li> </ol> </li> <li>Open the Chat Room:<ol> <li>After creating the chat room, open it for the user.</li> </ol> </li> </ol>"},{"location":"chat/#how-to-update-a-chat-room","title":"How to Update a Chat Room","text":"<ol> <li>Open Update Chat Room Dialog:</li> <li>Call the <code>updateChatRoom</code> custom action.<ol> <li>Alternatively, use <code>editChatRoom</code> which supports both creation and update.</li> </ol> </li> <li>Close the Dialog:<ol> <li>After updating the chat room, close the dialog.</li> </ol> </li> </ol>"},{"location":"chat/#example","title":"Example","text":"<p>Here is an example of source code for creating or updating a chat room.</p> <pre><code>ElevatedButton(\n  onPressed: () async {\n    if (widget.roomId != null) {\n      await updateChatRoom(\n        widget.roomId!,\n        nameController.text,\n        descriptionController.text,\n        iconUrl,\n        open,\n        canInvite,\n      );\n      Navigator.of(context).pop();\n      return;\n    }\n    final roomId = await createChatRoom(\n      nameController.text,\n      descriptionController.text,\n      iconUrl,\n      open,\n      canInvite,\n    );\n    Navigator.of(context).pop();\n    showGeneralDialog(\n      context: context,\n      pageBuilder: (_, __, ___) {\n        return ChatRoomScreen(\n          roomId: roomId,\n        );\n      },\n    );\n  },\n  child: const Text('Save'),\n</code></pre>"},{"location":"chat/#how-to-list-my-chat-room-list","title":"How to list my Chat Room List","text":"<ol> <li> <p>Add ChatRoomListView custom widget into body in a screen</p> </li> <li> <p>Use onTap action to open a chat room.</p> </li> </ol>"},{"location":"chat/#customizing-chat-room-list-with-custom-code","title":"Customizing Chat Room List with Custom Code","text":"<p>Below is a sample code of how you can use the chat room list view widget.</p> <pre><code>ChatRoomListView(\n  onTap: (roomId) =&gt; showGeneralDialog(\n    context: context,\n    pageBuilder: (_, __, ___) {\n      return ChatRoomScreen(roomId: roomId);\n    },\n  ),\n),\n</code></pre>"},{"location":"chat/#customizing-chat-room-list-with-component","title":"Customizing Chat Room List with Component","text":"<ol> <li> <p>Make a Component with your own Design</p> </li> <li> <p>Connect your component to Component.chatRoomListTile.</p> </li> </ol> <pre><code>Component.chatRoomListTile = (join) =&gt; ChatRoomListTileWidget(\n      roomId: join.roomId,\n      name: join.name,\n      iconUrl: join.iconUrl,\n      displayName: join.displayName,\n      photoUrl: join.photoUrl,\n      group: join.group,\n      single: join.single,\n      open: join.open,\n      lastMessageAt: join.lastMessageAt,\n      lastMessageDeleted: join.lastMessageDeleted,\n      lastText: join.lastText,\n      lastUrl: join.lastUrl,\n      lastProtocol: join.lastProtocol,\n      unreadMessageCount: join.unreadMessageCount,\n    );\n</code></pre>"},{"location":"chat/#how-to-list-open-chat-rooms","title":"How to list Open Chat Rooms","text":"<ol> <li> <p>Add OpenChatRoomListView custom widget into body in a screen</p> </li> <li> <p>Use onTap action to open a chat room.</p> </li> </ol>"},{"location":"chat/#customizing-open-chat-room-list-with-custom-code","title":"Customizing Open Chat Room List with Custom Code","text":"<p>Below is a sample code of how you can use the chat room list view widget.</p> <pre><code>OpenChatRoomListView(\n  onTap: (roomId) =&gt; showGeneralDialog(\n    context: context,\n    pageBuilder: (_, __, ___) {\n      return ChatRoomScreen(\n        roomId: roomId,\n      );\n    },\n  ),\n)\n</code></pre>"},{"location":"chat/#customizing-open-chat-room-list-with-component","title":"Customizing Open Chat Room List with Component","text":"<ol> <li> <p>Make a Component with your own Design</p> </li> <li> <p>Connect your component to Component.chatRoomListTile.</p> </li> </ol> <pre><code>Component.openChatRoomListTile = (room) =&gt; OpenChatRoomListTileWidget(\n      roomId: room.id,\n      name: room.name,\n      description: room.description,\n      iconUrl: room.iconUrl,\n      users: room.users,\n      blockedUsers: room.blockedUids,\n      masterUsers: room.masterUsers,\n      createdAt: room.createdAt,\n      updatedAt: room.updatedAt,\n      open: room.open,\n      openCreatedAt: room.openCreatedAt,\n      single: room.single,\n      group: room.group,\n      lastMessageAt: room.lastMessageAt,\n      allMembersCanInvite: room.allMembersCanInvite,\n    );\n</code></pre>"},{"location":"chat/#opening-a-chat-room-screen","title":"Opening a chat room screen","text":"<ol> <li> <p>Create a chat room screen with parameter roomId as String</p> </li> <li> <p>Add ChatMessageListView custom widget from Super library and pass the roomId onto it.</p> </li> <li> <p>Add a TextField widget and a Button</p> </li> <li>Name the TextField as text</li> <li> <p>When the button is pressed, call sendChatMessage custom action from the super library with the text.</p> </li> <li> <p>Then open the chat room screen by passing a user\u2019s uid. And continue chat.</p> </li> </ol>"},{"location":"chat/#inviting-a-user-into-a-chat-room","title":"Inviting a user into a chat room","text":"<ol> <li>Add a button on a group chat room to open a user-invite screen.</li> <li> <p>Pass the chat room id over the user-invite screen.</p> </li> <li> <p>In the user invite screen, you can search a user as described in User search</p> </li> <li> <p>Call the inviteChatUser custom action to invite the user into the chat room.</p> </li> <li>Pass the room id and the searched user uid.</li> </ol>"},{"location":"core_developer_guide_line/","title":"Core Developer\u2019s Guideline","text":"<p>Developing a super library in the FlutterFlow dashboard is not recommended. It's much faster to develop using VSCode.</p>"},{"location":"core_developer_guide_line/#recommended-setup","title":"Recommended Setup","text":"<ol> <li>Create a Flutter Project:</li> <li> <p>Name the project <code>super_library_flutter_example</code>.</p> </li> <li> <p>Download the Super Library Code:</p> </li> <li> <p>Use the VSCode extension <code>FF Download Code</code> to download the FlutterFlow Super Library code into the <code>super_library_flutter_example</code> Flutter project.</p> </li> <li> <p>Download the Example App Code:</p> </li> <li>Create a FlutterFlow app that consumes the super library.</li> <li>Use the VSCode extension <code>FF Download Code</code> to download the FlutterFlow example app that consumes the Super Library.</li> </ol>"},{"location":"core_developer_guide_line/#example-setup","title":"Example Setup","text":"<p>Below are my(JaeHo, Song) setup;</p> <ol> <li>Create the Flutter Project:</li> <li> <p>Path: <code>/Users/thruthesky/apps/flutter/ff-libraries/super_library_example</code></p> </li> <li> <p>Download the Super Library Code:</p> </li> <li> <p>Path: <code>/Users/thruthesky/apps/flutter/ff-libraries/super_library_example/super-library-5mglde</code></p> </li> <li> <p>Download the FlutterFlow Example Project:</p> </li> <li>Path: <code>/Users/thruthesky/tmp/ff-examples/test-super-library-ldkmay</code></li> </ol>"},{"location":"core_developer_guide_line/#working-with-multiple-projects","title":"Working with Multiple Projects","text":"<ul> <li>Open all the three VSCode projects simultaneously.</li> <li>Edit the Super Library code within the <code>super_library_flutter_example</code> Flutter project.</li> <li>Test the Super Library code while editing it.</li> <li>Perform final tests in the FlutterFlow example project (<code>test-super-library-ldkmay</code>).</li> </ul>"},{"location":"core_developer_guide_line/#tips","title":"Tips","text":"<ul> <li>Use Git for version control: GitHub Repository</li> <li>For more information, contact the creator.</li> </ul>"},{"location":"custom_actions/","title":"Custom Actions","text":""},{"location":"custom_actions/#isanonymous","title":"isAnonymous","text":"<p>The <code>isAnonymous</code> function checks if the current user is anonymous.</p>"},{"location":"custom_actions/#how-it-works","title":"How It Works","text":"<ul> <li>Returns <code>true</code>: If the user is signed in and is anonymous.</li> <li>Returns <code>false</code>: If the user is not signed in or is not anonymous.</li> </ul>"},{"location":"custom_functions/","title":"Custom Functions","text":""},{"location":"custom_functions/#endrange","title":"<code>endRange</code>","text":""},{"location":"custom_functions/#purpose","title":"Purpose","text":"<p>Returns the end string of the search range.</p>"},{"location":"custom_functions/#why-use-this-function","title":"Why Use This Function?","text":"<p>This function is designed for querying a string field within a specific range.</p>"},{"location":"custom_functions/#example-use-case","title":"Example Use Case","text":"<p>Suppose you want to search for names that begin with \"You\". You can query like this:</p> <pre><code>name &gt;= \"You\" &amp;&amp; name &lt; \"You\"\n</code></pre>"},{"location":"custom_functions/#backend-query-example","title":"Backend Query Example","text":"<p>Below is an example of a backend query in a ListView to perform a case-insensitive user search.</p> <p></p>"},{"location":"dart_extensions/","title":"Dart Extensions","text":""},{"location":"dart_extensions/#string-extensions","title":"String Extensions","text":""},{"location":"dart_extensions/#or-method","title":"<code>or</code> Method","text":"<p>The <code>or</code> method replaces the string with the provided parameter if the original string is null or empty.</p>"},{"location":"dart_extensions/#example","title":"Example","text":"<pre><code>user.displayName.or('...')\n</code></pre> <p>In this example, if user.displayName is null or empty, it will be replaced with '...'.</p>"},{"location":"design/","title":"Design","text":""},{"location":"design/#design-customization","title":"Design Customization","text":""},{"location":"design/#ui-design-and-customization","title":"UI Design and Customization","text":"<p>The default UI design is built into the custom code, but you can override it.</p>"},{"location":"design/#updating-the-default-ui-design","title":"Updating the Default UI Design","text":"<p>You can update the default UI design in the Super Library by updating the Theme of your FlutterFlow project. The Super Library follows the FlutterFlow Theme system.</p>"},{"location":"design/#using-default-components","title":"Using Default Components","text":"<p>The Super Library provides default components. You can either use these default components or copy and paste them to create your own custom components.</p>"},{"location":"features/","title":"Features","text":"<p>The Super Library offers comprehensive features for social apps like chat or forums:</p> <ul> <li>Scalability: Uses the Realtime Database for maximum scalability.</li> <li>User Management:<ul> <li>User data CRUD (Create, Read, Update, Delete)</li> <li>User search</li> <li>Public profiles</li> </ul> </li> <li>Social Features: <ul> <li>Like</li> <li>Block</li> <li>Report</li> </ul> </li> <li>Chat Features: Complete chat functionality.</li> <li>Forum/Blog Features: Complete forum and blog functionality.</li> </ul>"},{"location":"known_issues/","title":"Known Issues","text":""},{"location":"known_issues/#chat-room-name-update-delay","title":"Chat Room Name Update Delay","text":""},{"location":"known_issues/#issue","title":"Issue","text":"<p>When a master edits the chat room name, the change does not take effect immediately. The updated name only appears after a new message is sent in the chat room.</p>"},{"location":"known_issues/#impact","title":"Impact","text":"<p>This is not a critical error, but it can be confusing for users expecting an immediate update.</p>"},{"location":"known_issues/#workaround","title":"Workaround","text":"<p>Masters can send a message in the chat room right after changing the name to force the update.</p>"},{"location":"known_issues/#resolution","title":"Resolution","text":"<p>We are aware of this issue and plan to fix it in a future update.</p>"},{"location":"quick_start/","title":"Quick Start","text":"<p>To use the Super Library, you need to add initialization code.</p>"},{"location":"quick_start/#why-initialization-is-needed","title":"Why Initialization is Needed","text":"<ul> <li>Web: Firebase Realtime Database requires additional code for web applications.</li> <li>Mobile: Firebase Realtime Database works without extra code on mobile apps.</li> </ul>"},{"location":"quick_start/#adding-initapp-custom-action","title":"Adding initApp Custom Action","text":"<p>Add the <code>initApp</code> custom action as shown below:</p> <pre><code>import 'package:super_library/custom_code/actions/super_library.dart';\n\nFuture initApp() async {\n  SuperLibrary.instance.init(\n    getDatabaseUrl: () =&gt; 'https://withcenter-test-4-default-rtdb.firebaseio.com',\n    debug: true,\n  );\n}\n</code></pre> <p>If you are using Dev Environment variable, you can initialize it like below;</p> <pre><code>  SuperLibrary.instance.init(\n    getDatabaseUrl: () =&gt; FFDevEnvironmentValues().databaseURL,\n  );\n</code></pre>"},{"location":"quick_start/#explanation","title":"Explanation","text":"<p>getDatabaseUrl: A callback function to return the database URL. It Supports environment variables, which are initialized after initApp is called. If not using environment variables, simply return the URL as a string.</p>"},{"location":"quick_start/#handling-errors","title":"Handling Errors","text":"<p>If you see an error like Target of URI doesn't exist: 'package:super_library/custom_code/actions/super_library.dart', run the app with \"Exclude from compilation\".</p>"},{"location":"quick_start/#adding-initapp-to-maindart","title":"Adding initApp to main.dart","text":"<p>Make sure to add the initApp custom action in your main.dart file.</p>"},{"location":"report/","title":"Reporting","text":"<p>Superlibrary provides custom actions to report users/chat message/chat room/ or any kinds of content.</p> <p>But the developer must list the report list using the FlutterFlow Backend Query.</p> <p>The blocked information is saved in Firestore.</p> <p>Firestore - database structure</p> <pre><code>/reports\n   /&lt;report-id&gt;\n     {\n        reporterUid:\n        reporteeUid:\n        createdAt:\n        reason:\n        summary:\n        id:\n        type:\n        order: \n     }\n</code></pre> <p>Based on the database structure, you can create any UI and UX.</p>"},{"location":"report/#how-to-report","title":"How to report","text":"<ul> <li> <p>Use report custom action to save the reporting instead of writing your own logic. You can save the reporting with your own Backend Query if you want.</p> </li> <li> <p>Don\u2019t ask the user to type anything. But let the user click(tap) one or two times. For instance, let the user choose one of the reasons: (1) Spam (2) Abusing (3) Bad content - instead of asking the user to type.</p> </li> <li> <p><code>summary</code> - is the summary of the content. If it is a post, add title and first part of the content. Don\u2019t ask the user to type anything to input a summary. </p> </li> <li> <p><code>type</code> - can be any type of data. It can be a user, chat, post, comment, photo, etc.</p> </li> <li><code>id</code> - is the id(or key) of the data(document key, photo url, etc) that you are reporting. This id goes together with the type. If the type is</li> <li><code>post</code>, then, this id will be the key of the post.</li> <li><code>user</code>, then this id will be the user\u2019s uid.</li> <li> <p>Note that the type and id  are used to track(connect) to the original data(content, document). For instance, if the type is chat-room then, the id is the chat room id. And in the admin\u2019s screen, the admin can destroy the chat room and block the master\u2019s account.</p> </li> <li> <p>Document ID will be generated like -type-id. <li>To check if the document exists, check if the document id exists.</li>"},{"location":"report/#how-to-check-if-the-same-content-has-been-reported","title":"How to check if the same content has been reported","text":"<ul> <li>Use reportExists custom action to check if the login user has already reported the same content.</li> <li>You can do this with your own Backend Query.</li> </ul>"},{"location":"report/#how-to-display-reports-for-the-login-user","title":"How to display reports for the login user","text":"<ul> <li>Backend query the reports collection with</li> <li>Order by <code>createdAt</code> to display all the reports</li> <li><code>type</code> and a type of post and with <code>createdAt</code></li> <li><code>reportee</code> for whom were reported with combination of type and createdAt</li> </ul>"},{"location":"report/#how-to-display-reports-for-the-admin","title":"How to Display Reports for the Admin","text":"<p>To display reports for the admin, perform a backend query on the reports collection using the following criteria:</p> <ol> <li> <p>Order by <code>createdAt</code>: Display all reports sorted by their creation date.</p> </li> <li> <p>Filter by <code>type</code>: Filter reports by the type of post and sort by <code>createdAt</code>.</p> </li> <li> <p>Filter by <code>reporter</code>:  Filter reports by the user who reported them, combined with <code>type</code> and <code>createdAt</code>.</p> </li> <li> <p>Filter by <code>reportee</code>: Filter reports by the user who was reported, combined with <code>type</code> and <code>createdAt</code>.</p> </li> </ol> <p>You can use any combination of the above fields to make the backend query.</p>"},{"location":"samples/","title":"Sample Projects","text":""},{"location":"samples/#flutterflow-sample-project","title":"FlutterFlow Sample Project","text":"<p>This project demonstrates how to use the Super Library in FlutterFlow. - View Project</p>"},{"location":"samples/#flutter-example-project","title":"Flutter Example Project","text":"<p>This project shows how to consume and test the Super Library in a Flutter app. - View on GitHub</p>"},{"location":"user/","title":"User","text":"<ul> <li>User</li> <li>Overview</li> <li>User Authentication</li> <li>UserAvatar</li> <li>User List View<ul> <li>Alternative Option</li> <li>Customizing the UI</li> <li>Horizontal Scrolling</li> <li>Examples</li> </ul> </li> <li>How to Customize UI Design in UserListView<ul> <li>Step 1: Create UserListIcon Component</li> <li>Step 2: Design UserListIcon Component</li> <li>Step 3: Create PublicProfileScreen</li> <li>Step 4: Add onTap Action to UserListIcon</li> <li>Step 5: Design PublicProfileScreen</li> </ul> </li> <li>Different UI Design on Each Screen</li> <li>User Search</li> <li>Setting Up User Search</li> <li>Search Options</li> <li>Note</li> <li>Search Users by <code>display_name</code> (Case-Insensitive)<ul> <li>Example Users</li> <li>Search Criteria</li> <li>Important Note</li> </ul> </li> <li>Functions<ul> <li>isAnonymous</li> </ul> </li> <li>Blocking User<ul> <li>Unblocking User</li> </ul> </li> </ul>"},{"location":"user/#overview","title":"Overview","text":"<ul> <li>The user's <code>display_name</code> and <code>photo_url</code> are mirrored from Firestore to the Realtime Database.</li> <li>The user's <code>display_name</code> is also stored in <code>display_name_lowercase</code> (in lowercase) for better searchability in both Firestore and the Realtime Database.</li> </ul>"},{"location":"user/#user-authentication","title":"User Authentication","text":"<p>The Super Library supports Firebase user authentication only.</p> <p>You can continue using FlutterFlow's authentication methods seamlessly with the Super Library.</p>"},{"location":"user/#useravatar","title":"UserAvatar","text":"<p>Use the <code>UserAvatar</code> widget to display a user's photo.</p> <ul> <li>No Photo URL: If no photo URL is provided, it shows a user icon.</li> <li>Background Color: The background color is <code>FlutterFlowTheme.of(context).alternate</code>.</li> <li>Foreground Color: The foreground color is <code>FlutterFlowTheme.of(context).primaryText</code>.</li> </ul> No photo url With with photo url"},{"location":"user/#user-list-view","title":"User List View","text":"<p>To list users from the Realtime Database, use the <code>UserListView</code> widget.</p>"},{"location":"user/#alternative-option","title":"Alternative Option","text":"<p>You can also use the built-in FlutterFlow Backend Query to list users from Firestore. This is a fine option if you are not concerned about the cost.</p>"},{"location":"user/#customizing-the-ui","title":"Customizing the UI","text":"<p>You have several options to customize the UI design:</p> <ul> <li>Default UI: Use the built-in default UI.</li> <li>Default Component: Use the default component provided.</li> <li>Custom Component: Design your own component.</li> </ul>"},{"location":"user/#horizontal-scrolling","title":"Horizontal Scrolling","text":"<p>You can make the <code>UserListView</code> display and scroll horizontally.</p>"},{"location":"user/#examples","title":"Examples","text":"<p>For examples, visit the Super Library Example.</p>"},{"location":"user/#how-to-customize-ui-design-in-userlistview","title":"How to Customize UI Design in UserListView","text":""},{"location":"user/#step-1-create-userlisticon-component","title":"Step 1: Create UserListIcon Component","text":"<ul> <li>Parameters:<ul> <li><code>uid</code> (String, required)</li> <li><code>displayName</code> (String, required)</li> <li><code>photoUrl</code> (ImagePath, optional)</li> </ul> </li> </ul>"},{"location":"user/#step-2-design-userlisticon-component","title":"Step 2: Design UserListIcon Component","text":"<ul> <li>Customize the design of the <code>UserListIcon</code> component as needed.</li> </ul>"},{"location":"user/#step-3-create-publicprofilescreen","title":"Step 3: Create PublicProfileScreen","text":"<ul> <li>Screen Name: You can name this screen as you like.</li> </ul>"},{"location":"user/#step-4-add-ontap-action-to-userlisticon","title":"Step 4: Add onTap Action to UserListIcon","text":"<ul> <li>Action: Open the <code>PublicProfileScreen</code> when <code>UserListIcon</code> is tapped.</li> <li>Customization: You can add any action and customize the UI/UX as desired.</li> </ul>"},{"location":"user/#step-5-design-publicprofilescreen","title":"Step 5: Design PublicProfileScreen","text":"<ul> <li>Customize the design of the <code>PublicProfileScreen</code> as needed.</li> </ul>"},{"location":"user/#different-ui-design-on-each-screen","title":"Different UI Design on Each Screen","text":"<p>You can design a different UI on each screen by following these steps:</p> <ol> <li>Design the Component:<ol> <li>Create components to display user in each screen.</li> </ol> </li> <li>Call a Custom Action:<ol> <li>Use a custom action to set the <code>userListTile</code> component.</li> <li>Example: <code>Component.userListTile = (user) =&gt; ...</code></li> </ol> </li> </ol>"},{"location":"user/#user-search","title":"User Search","text":"<p>The Super Library does not provide UI or code for user search due to FlutterFlow's limitations. Follow these steps to create your own user search:</p>"},{"location":"user/#setting-up-user-search","title":"Setting Up User Search","text":"<ol> <li>Add <code>display_name_lowercase</code> Field:<ol> <li>This field will be automatically saved in the Firestore user document.</li> <li>Add a field named <code>display_name_lowercase</code> in the user schema.</li> <li>This field will store the lowercase version of the user's <code>display_name</code>.</li> </ol> </li> <li>Search Implementation:<ol> <li>Compare user input in lowercase to the value of <code>display_name_lowercase</code>.</li> <li>Use the <code>.toLowerCase()</code> method for comparison.</li> </ol> </li> </ol>"},{"location":"user/#search-options","title":"Search Options","text":"<p>You can filter/search the user's <code>display_name_lowercase</code>:</p> <ul> <li>Equality Match: Exact match.</li> <li>Partial Match: Match the beginning part of the name.</li> </ul>"},{"location":"user/#note","title":"Note","text":"<p>This is the nature of how FlutterFlow works, so the Super Library does not provide any UI for this feature. For an example, please see the Super Library sample project.</p> <p>You can also write custom code to search for users in the Realtime Database.</p>"},{"location":"user/#search-users-by-display_name-case-insensitive","title":"Search Users by <code>display_name</code> (Case-Insensitive)","text":""},{"location":"user/#example-users","title":"Example Users","text":"<p>Let\u2019s there are users whose display_name are;</p> <ul> <li>Young One</li> <li>younG Two</li> <li>You and Me</li> </ul>"},{"location":"user/#search-criteria","title":"Search Criteria","text":"<p>To search for users whose <code>display_name</code> begins with \"you\" (case-insensitive), you can query Firestore on <code>display_name_lowercase</code> field and display the results in a <code>ListView</code>.</p>"},{"location":"user/#important-note","title":"Important Note","text":"<p>Allowing users to search for other users with a single letter, like <code>a</code>, can result in a large number of users being listed. This can lead to spam messages being sent to users whom they don't know. To prevent this, it is recommended to limit the search to words that are longer than 3 or 4 characters. This helps ensure that search results are more specific and reduces the likelihood of spam.</p>"},{"location":"user/#functions","title":"Functions","text":""},{"location":"user/#isanonymous","title":"isAnonymous","text":"<p>See the custom actions page</p>"},{"location":"user/#blocking-user","title":"Blocking User","text":"<ul> <li> <p>To block a user, you can call <code>blockUser</code> custom action to block a user. Or you can simply create your own Backend Query to save the other user's uid into the <code>blockedUsers</code> array field in your user document.</p> </li> <li> <p>The <code>blockUser</code> custom action will save the user's uid into the <code>blockedUsers</code> array field. And the <code>blockedUsers</code> will be mirrored to <code>/blocked-users/&lt;my-uid&gt;/</code> by the <code>_mirrorUserData</code> method in the super library. So, you will simply save the other user uid into <code>blockedUsers</code> field of your own document.</p> </li> </ul>"},{"location":"user/#unblocking-user","title":"Unblocking User","text":"<ul> <li>Super library does not provide any method to detect if a user is blocked by you or now because it's so easy. And it will be more complicated with super library.</li> <li>To know if a user is blocked or not, simply do the way how the FlutterFlow goes</li> <li>The <code>blockedUsers</code> is in your document. Meaning, it will be automatically synced with the <code>Authenticated User</code> variable in FlutterFlow. So, you don't need to query to the Firestore to know if someone is blocked by you or not.</li> <li>To display if the user is blocked or not, check if the user's uid is in the <code>blockedUsers</code> of <code>Authenticated User</code>. And if the uid exists, then the user is blocked and you can unblock the user.<ul> <li>Again super library does not provide any method for this. You can simply query the Firestore to remove the other user's uid from <code>blockedUsers</code> array field.</li> <li>And the super library will automatically remove the user's uid from the Realtime Database.</li> </ul> </li> </ul>"},{"location":"common_library/","title":"Common Library","text":"<p>Common library provides most common functions, custom actions, or custom widgets.</p> <p>It does not provides anything of the Disabled Features in a Library of FlutterFlow.</p>"},{"location":"common_library/#sample-site","title":"Sample site","text":"<p>Run build at - Oct 17, 2024</p>"},{"location":"common_library/components/country_picker/","title":"Country Picker","text":""},{"location":"common_library/components/country_picker/#country-picker-component","title":"Country Picker Component","text":"<p>The Country Picker component allows you to easily get country dial codes and other information. It is primarily designed for selecting country dial codes during phone sign-in but can also be used for other purposes, such as:</p> <ul> <li>Getting the country flag</li> <li>Getting the country name</li> <li>Getting the two-letter country code</li> </ul>"},{"location":"common_library/components/country_picker/#examples","title":"Examples","text":""},{"location":"common_library/components/country_picker/#country-selector","title":"Country Selector","text":""},{"location":"common_library/components/country_picker/#when-a-country-is-selected","title":"When a Country is Selected","text":""},{"location":"common_library/components/country_picker/#country-search-bottom-sheet","title":"Country Search Bottom Sheet","text":""},{"location":"common_library/custom_actions/package_info/","title":"Package Info","text":"<p>This custom action provides an API for querying information about an application package. It works on iOS, Android, and Web.</p>"},{"location":"common_library/custom_actions/package_info/#usage","title":"Usage","text":"<p>You can use the <code>packageInfo</code> action to query information about the application package.</p>"},{"location":"common_library/custom_actions/package_info/#response","title":"Response","text":"<p>The <code>packageInfo</code> custom action will return the following information in JSON format:</p> <pre><code>{\n  \"appName\": \"app name\",\n  \"packageName\": \"package name\",\n  \"version\": \"version\",\n  \"buildNumber\": \"build number\"\n}\n</code></pre>"},{"location":"common_library/custom_functions/formatInternationalPhoneNumber/","title":"formatInternationalPhoneNumber function","text":"<p>The function accepts <code>dialCode</code> and <code>mobileNumber</code> and returns the phone number in the international format. If it cannot format the phone number, it returns an empty string. If the phone number is an empty string, the FlutterFlow will display an error message of <code>Phone Number Validation Message</code>. You can customize this message to something like <code>Please input a valid phone number</code> in the language settings.</p> <p>Note: The returned value may not be an exact international phone number format, but it is sufficient for use in FirebaseAuth phone sign-in.</p> <p>Note: It's a good idea to allow users to input only numbers. Set the input keyboard type to \"number\" or \"phone number\" for better user experience.</p> <pre><code>String formatInternationalPhoneNumber(String dialCode, String mobileNumber);\n</code></pre> <p>Below are the test code of <code>formatInternationalPhoneNumber</code>.</p> <pre><code>void runTests() {\n  // Test cases\n  List&lt;Map&lt;String, dynamic&gt;&gt; testCases = [\n    {\n      'dialCode': '+82',\n      'mobileNumber': '010-1234-5678',\n      'expected': '+821012345678'\n    }, // Valid case\n    {\n      'dialCode': '1',\n      'mobileNumber': '1234567890',\n      'expected': '+11234567890'\n    }, // Valid case (US number)\n    {\n      'dialCode': '+44',\n      'mobileNumber': '(020) 1234-5678',\n      'expected': '+442012345678'\n    }, // Valid case (UK number with formatting characters)\n    {\n      'dialCode': '82',\n      'mobileNumber': '010 1234 5678',\n      'expected': '+821012345678'\n    }, // Valid case (without +)\n    {\n      'dialCode': '+49',\n      'mobileNumber': '01520-1234567',\n      'expected': '+4915201234567'\n    }, // Valid case (German number)\n    {\n      'dialCode': '+1',\n      'mobileNumber': 'abc-1234-5678',\n      'expected': ''\n    }, // Invalid mobile number (contains letters)\n    {\n      'dialCode': '+abc',\n      'mobileNumber': '01012345678',\n      'expected': ''\n    }, // Invalid dial code (contains letters)\n    {\n      'dialCode': '123+',\n      'mobileNumber': '01012345678',\n      'expected': ''\n    }, // Invalid dial code (plus sign in wrong position)\n    {\n      'dialCode': '82',\n      'mobileNumber': '01012345678#',\n      'expected': ''\n    }, // Invalid mobile number (contains symbols)\n    {\n      'dialCode': '+61',\n      'mobileNumber': '0412345678',\n      'expected': '+61412345678'\n    }, // Valid case (Australia number)\n    {\n      'dialCode': '+82',\n      'mobileNumber': '010123',\n      'expected': ''\n    }, // Invalid mobile number (too short)\n    {\n      'dialCode': '+82',\n      'mobileNumber': '0101234567890123',\n      'expected': ''\n    }, // Invalid mobile number (too long)\n    {\n      'dialCode': '+1',\n      'mobileNumber': ' 1111 1111- 1 1 ',\n      'expected': '+11111111111'\n    },\n    {\n      'dialCode': '+1',\n      'mobileNumber': '0 1111 1111- 1 1 ',\n      'expected': '+11111111111'\n    },\n    {\n      'dialCode': '+63',\n      'mobileNumber': '0 917 1234-5-6 7 8 ',\n      'expected': '+6391712345678'\n    },\n  ];\n\n  int passed = 0;\n  int failed = 0;\n  List&lt;String&gt; failedTests = [];\n\n  // Run each test case\n  for (var testCase in testCases) {\n    String result = formatInternationalPhoneNumber(\n        testCase['dialCode'], testCase['mobileNumber']);\n    if (result == testCase['expected']) {\n      passed++;\n    } else {\n      failed++;\n      failedTests.add(\n          'Test failed for Dial code: ${testCase['dialCode']}, Mobile: ${testCase['mobileNumber']} -&gt; The result is empty string, Result: $result');\n    }\n  }\n\n  // Print test results\n  print('Total tests: ${testCases.length}');\n  print('Passed: $passed');\n  print('Failed: $failed');\n\n  // Print detailed info for failed tests\n  if (failed &gt; 0) {\n    print('\\nFailed test cases:');\n    for (var failedTest in failedTests) {\n      print(failedTest);\n    }\n  }\n}\n\nvoid main() {\n  runTests();\n}\n</code></pre>"},{"location":"common_library/custom_widgets/comm_circular_progress_indicator/","title":"CommonCircularProgressIndicator","text":"<p>FlutterFlow currently does not offer a built-in widget for displaying a <code>CircularProgressIndicator</code>. </p> <p>You can use the <code>CommonCircularProgressIndicator</code> widget to display a circular progress indicator in your application.</p>"},{"location":"common_library/custom_widgets/comm_circular_progress_indicator/#commoncircularprogressindicator_1","title":"CommonCircularProgressIndicator","text":""},{"location":"common_library/custom_widgets/comm_circular_progress_indicator/#commoncircularprogressindicator-with-adaptive","title":"CommonCircularProgressIndicator with adaptive","text":""}]}